#!/bin/bash

# Usage:
# ./volume_script.sh toggle   # Toggle mute/unmute the current device
# ./volume_script.sh up       # Increase volume by 5%
# ./volume_script.sh down     # Decrease volume by 5%
# ./volume_script.sh display  # Display the current volume, mute status, and output device
# ./volume_script.sh switch   # Switch between headset, headphones, and speakers

# Define sink and port names
HEADPHONES_SINK="alsa_output.pci-0000_00_1f.3.analog-stereo"
SPEAKERS_SINK="alsa_output.pci-0000_00_1f.3.analog-stereo"  # Same sink as headphones
HEADSET_SINK="bluez_output.00_A4_1C_A0_FB_24.1"              # Sink for Bluetooth headset

HEADPHONES_PORT="analog-output-headphones"
SPEAKERS_PORT="analog-output-speaker"
HEADSET_PORT="headset-output"

# Function to get the current volume level
get_volume() {
    pactl get-sink-volume @DEFAULT_SINK@ | grep -oP '[0-9]+(?=%)' | head -1
}

# Function to get mute status
is_muted() {
    pactl get-sink-mute @DEFAULT_SINK@ | grep -q "yes"
}

# Function to get the active port for the default sink
get_active_port() {
    DEFAULT_SINK=$(pactl info | grep "Default Sink" | awk '{print $3}')
    pactl list sinks | awk "/Name: $DEFAULT_SINK/{found=1} found && /Active Port/{print \$3; exit}"
}

# Function to display the volume, mute status, and output device
display_volume() {
    vol=$(get_volume)
    if is_muted; then
        echo " muted"  # Mute icon
    else
        icon=$(get_output_device)
        echo "$icon $vol%"
    fi
}

# Function to determine the output device icon
get_output_device() {
    active_port=$(get_active_port)

    if [[ "$active_port" == "$HEADPHONES_PORT" ]]; then
        echo ""  # Headphone icon
    elif [[ "$active_port" == "$HEADSET_PORT" ]]; then
        echo ""  # Headphone icon
    elif [[ "$active_port" == "$SPEAKERS_PORT" ]]; then
        vol=$(get_volume)
        if [ "$vol" -ge 70 ]; then
            echo ""   # High volume icon
        elif [ "$vol" -ge 30 ]; then
            echo ""  # Medium volume icon
        else
            echo ""  # Low volume icon
        fi
    else
        echo ""  # Default to speaker icon if no match
    fi
}

# Function to toggle mute status
toggle_mute() {
    pactl set-sink-mute @DEFAULT_SINK@ toggle > /dev/null 2>&1
    display_volume
}

# Function to adjust the volume
adjust_volume() {
    if [ "$1" == "up" ]; then
        pactl set-sink-volume @DEFAULT_SINK@ +5% > /dev/null 2>&1
    elif [ "$1" == "down" ]; then
        pactl set-sink-volume @DEFAULT_SINK@ -5% > /dev/null 2>&1
    fi
    display_volume
}

# Function to switch between headset, headphones, and speakers
switch_output_device() {
    active_port=$(get_active_port)

    case "$active_port" in
        "$HEADPHONES_PORT")
            # Switch to speakers
            pactl set-default-sink "$SPEAKERS_SINK"
            pactl set-sink-port "$SPEAKERS_SINK" "$SPEAKERS_PORT"
            ;;
        "$SPEAKERS_PORT")
            # Switch to headset
            pactl set-default-sink "$HEADSET_SINK"
            pactl set-sink-port "$HEADSET_SINK" "$HEADSET_PORT"
            ;;
        "$HEADSET_PORT")
            # Switch back to headphones
            pactl set-default-sink "$HEADPHONES_SINK"
            pactl set-sink-port "$HEADPHONES_SINK" "$HEADPHONES_PORT"
            ;;
        *)
            notify-send "Audio Output" "Unknown port: $active_port"
            ;;
    esac
}

# Parse command-line arguments
case "$1" in
    toggle)
        toggle_mute
        ;;
    up)
        adjust_volume up
        ;;
    down)
        adjust_volume down
        ;;
    display)
        display_volume
        ;;
    switch)
        switch_output_device
        ;;
    *)
        echo "Usage: $0 {toggle|up|down|display|switch}"
        exit 1
        ;;
esac
